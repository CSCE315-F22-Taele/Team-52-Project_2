package edu.tamu.spinnstone.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import edu.tamu.spinnstone.models.sql.Database;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Set;

public class Analytics {
    private JPanel panel1;
    private JTable pairTable;
    private JTextField fromDateField;
    private JTextField toDateField;
    private JButton searchButton;
    private JScrollPane tableContainer;

    public Analytics() {
        searchButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                java.sql.Date startTime = java.sql.Date.valueOf("2022-9-04");
                java.sql.Date endTime = java.sql.Date.valueOf("2022-10-15");
                determinePairs(startTime, endTime);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        tableContainer = new JScrollPane();
        panel1.add(tableContainer, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        pairTable = new JTable();
        tableContainer.setViewportView(pairTable);
        fromDateField = new JTextField();
        panel1.add(fromDateField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        toDateField = new JTextField();
        panel1.add(toDateField, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        searchButton = new JButton();
        searchButton.setText("Search");
        panel1.add(searchButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

    private void displayTable(String[][] rows) {
        String[] labels = {"Menu Item Pair", "Occurrences"};
        pairTable = new JTable(rows, labels);
        tableContainer.setViewportView(pairTable);
    }

    private void determinePairs(java.sql.Date startDate, java.sql.Date endDate) {
        Database database = Actions.getDatabase.getValue();
        String h = "";
        HashMap<Set<String>, Integer> pairOccurrences = new HashMap<>();

        // TODO: account for empty date range
        try {
            // get orders between start date and end date (inclusive)
            ResultSet rs_orders = database.query("select order_id from \"order\" " +
                    "where (order_date <= \'" + endDate.toLocalDate() + "\' and order_date >= \'" + startDate.toLocalDate() + "\');");

            // loop through orders to record pairs
            do {
                h += rs_orders.getString(1) + " ";
                String orderId = rs_orders.getString(1);
                ResultSet rs_order_items = database.query("select item_name from order_item " +
                        "join menu_item on menu_item.menu_item_id=order_item.menu_item_id " +
                        "where order_item.order_id = " + orderId + ";");
                do {
                    // TODO: record pairs
                    System.out.println(rs_order_items.getString(1));
                } while (rs_order_items.next());

                System.out.println();
            } while (rs_orders.next());

            System.out.println(h);
        } catch (SQLException e) {
            System.out.println("SQLException: " + e);
        }
    }
}
