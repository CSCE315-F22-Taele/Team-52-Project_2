package edu.tamu.spinnstone.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import edu.tamu.spinnstone.models.Order;
import edu.tamu.spinnstone.models.OrderItem;
import edu.tamu.spinnstone.models.Product;
import edu.tamu.spinnstone.models.sql.Database;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.ResultSet;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class MenuOptions {
    private JPanel MenuOptionCards;
    private JPanel pizzaTypeMenu;
    private JButton cheeseButton;
    private JButton a1ToppingButton;
    private JButton buildYourOwnButton;
    private JPanel pizzaCustomizationMenu;
    private JToggleButton STANDARDButton;
    private JToggleButton CAULIFLOWERButton;
    private JToggleButton ALFREDOButton;
    private JToggleButton TRADITIONALREDButton;
    private JToggleButton ZESTYREDButton;
    private JToggleButton NOSAUCEButton;
    private JToggleButton HOUSEBLENDButton;
    private JToggleButton PARMESANButton;
    private JToggleButton BBQSAUCEButton;
    private JToggleButton OLIVEOILButton;
    private JToggleButton DICEDHAMButton;
    private JToggleButton ITALIANSAUSAGEButton;
    private JToggleButton MEATBALLButton;
    private JToggleButton PEPPERONIButton;
    private JToggleButton SALAMIButton;
    private JToggleButton SMOKEDCHICKENButton;
    private JToggleButton BANANAPEPPERSButton;
    private JToggleButton BLACKOLIVESButton;
    private JToggleButton GREENPEPPERSButton;
    private JToggleButton JALAPENOSButton;
    private JToggleButton MUSHROOMSButton;
    private JToggleButton ONIONSButton;
    private JToggleButton PINEAPPLEButton;
    private JToggleButton ROASTEDGARLICButton;
    private JToggleButton SPINACHButton;
    private JToggleButton TOMATOESButton;

    private JPanel drinkMenu;
    private JButton BOTTLEDButton;
    private JButton WATERButton;
    private JButton GATORADEButton;
    private JButton FOUNTAINButton;

    private List<JToggleButton> pizzaButtons;
    private List<JToggleButton> sauceButtons;
    private List<JToggleButton> crustButtons;
    private List<JToggleButton> drizzleButtons;
    private List<JToggleButton> cheeseButtons;
    private List<JToggleButton> toppingButtons;
    private List<JButton> drinkButtons;

    private List<Product.Name> pizzaToppings;
    private List<Product.Name> pizzaSauces;
    private List<Product.Name> pizzaCrusts;

    private HashMap<Product.Name, JToggleButton> pizzaToppingMap;
    private HashMap<edu.tamu.spinnstone.models.MenuItem.ItemNames, JButton> drinkMap;
    private HashMap<edu.tamu.spinnstone.models.MenuItem.ItemNames, JButton> pizzaMap;

    // @formatter:off

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MenuOptionCards = new JPanel();
        MenuOptionCards.setLayout(new CardLayout(0, 0));
        MenuOptionCards.setBackground(new Color(-1644826));
        pizzaTypeMenu = new JPanel();
        pizzaTypeMenu.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        pizzaTypeMenu.setBackground(new Color(-1644826));
        MenuOptionCards.add(pizzaTypeMenu, "pizzaType");
        cheeseButton = new JButton();
        cheeseButton.setBackground(new Color(-15066598));
        cheeseButton.setForeground(new Color(-1));
        cheeseButton.setText("CHEESE");
        pizzaTypeMenu.add(cheeseButton);
        a1ToppingButton = new JButton();
        a1ToppingButton.setBackground(new Color(-15066598));
        a1ToppingButton.setForeground(new Color(-1));
        a1ToppingButton.setText("1 TOPPING");
        pizzaTypeMenu.add(a1ToppingButton);
        buildYourOwnButton = new JButton();
        buildYourOwnButton.setBackground(new Color(-15066598));
        buildYourOwnButton.setForeground(new Color(-1));
        buildYourOwnButton.setText("BUILD YOUR OWN");
        pizzaTypeMenu.add(buildYourOwnButton);
        pizzaCustomizationMenu = new JPanel();
        pizzaCustomizationMenu.setLayout(new GridLayoutManager(7, 1, new Insets(0, 0, 0, 0), -1, -1));
        pizzaCustomizationMenu.setBackground(new Color(-1644826));
        MenuOptionCards.add(pizzaCustomizationMenu, "toppings");
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-1644826));
        pizzaCustomizationMenu.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new CardLayout(0, 0));
        panel2.setBackground(new Color(-1644826));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(80, -1), null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-16777216));
        label1.setHorizontalAlignment(0);
        label1.setText("CRUST");
        panel2.add(label1, "Card1");
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel3.setBackground(new Color(-1644826));
        panel1.add(panel3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        STANDARDButton = new JToggleButton();
        STANDARDButton.setBackground(new Color(-15066598));
        STANDARDButton.setForeground(new Color(-1));
        STANDARDButton.setSelected(true);
        STANDARDButton.setText("STANDARD");
        panel3.add(STANDARDButton);
        CAULIFLOWERButton = new JToggleButton();
        CAULIFLOWERButton.setBackground(new Color(-15066598));
        CAULIFLOWERButton.setForeground(new Color(-1));
        CAULIFLOWERButton.setText("CAULIFLOWER");
        panel3.add(CAULIFLOWERButton);
        final Spacer spacer1 = new Spacer();
        pizzaCustomizationMenu.add(spacer1, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel4.setBackground(new Color(-1644826));
        pizzaCustomizationMenu.add(panel4, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new CardLayout(0, 0));
        panel5.setBackground(new Color(-1644826));
        panel4.add(panel5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(80, -1), null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setForeground(new Color(-16777216));
        label2.setHorizontalAlignment(0);
        label2.setText("SAUCE");
        panel5.add(label2, "Card1");
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel6.setBackground(new Color(-1644826));
        panel4.add(panel6, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ALFREDOButton = new JToggleButton();
        ALFREDOButton.setBackground(new Color(-15066598));
        ALFREDOButton.setForeground(new Color(-1));
        ALFREDOButton.setSelected(true);
        ALFREDOButton.setText("ALFREDO");
        panel6.add(ALFREDOButton);
        TRADITIONALREDButton = new JToggleButton();
        TRADITIONALREDButton.setBackground(new Color(-15066598));
        TRADITIONALREDButton.setForeground(new Color(-1));
        TRADITIONALREDButton.setText("TRADITIONAL RED");
        panel6.add(TRADITIONALREDButton);
        ZESTYREDButton = new JToggleButton();
        ZESTYREDButton.setBackground(new Color(-15066598));
        ZESTYREDButton.setForeground(new Color(-1));
        ZESTYREDButton.setText("ZESTY RED");
        panel6.add(ZESTYREDButton);
        NOSAUCEButton = new JToggleButton();
        NOSAUCEButton.setBackground(new Color(-15066598));
        NOSAUCEButton.setForeground(new Color(-1));
        NOSAUCEButton.setText("NO SAUCE");
        panel6.add(NOSAUCEButton);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel7.setBackground(new Color(-1644826));
        pizzaCustomizationMenu.add(panel7, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new CardLayout(0, 0));
        panel8.setBackground(new Color(-1644826));
        panel7.add(panel8, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(80, -1), null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setForeground(new Color(-16777216));
        label3.setHorizontalAlignment(0);
        label3.setText("CHEESE");
        panel8.add(label3, "Card1");
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel9.setBackground(new Color(-1644826));
        panel7.add(panel9, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        HOUSEBLENDButton = new JToggleButton();
        HOUSEBLENDButton.setBackground(new Color(-15066598));
        HOUSEBLENDButton.setForeground(new Color(-1));
        HOUSEBLENDButton.setText("HOUSE BLEND");
        panel9.add(HOUSEBLENDButton);
        PARMESANButton = new JToggleButton();
        PARMESANButton.setBackground(new Color(-15066598));
        PARMESANButton.setForeground(new Color(-1));
        PARMESANButton.setText("PARMESAN");
        panel9.add(PARMESANButton);
        final JPanel panel10 = new JPanel();
        panel10.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel10.setBackground(new Color(-1644826));
        pizzaCustomizationMenu.add(panel10, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel11 = new JPanel();
        panel11.setLayout(new CardLayout(0, 0));
        panel11.setBackground(new Color(-1644826));
        panel10.add(panel11, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(80, -1), null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setForeground(new Color(-16777216));
        label4.setHorizontalAlignment(0);
        label4.setText("DRIZZLE");
        panel11.add(label4, "Card1");
        final JPanel panel12 = new JPanel();
        panel12.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel12.setBackground(new Color(-1644826));
        panel10.add(panel12, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        BBQSAUCEButton = new JToggleButton();
        BBQSAUCEButton.setBackground(new Color(-15066598));
        BBQSAUCEButton.setForeground(new Color(-1));
        BBQSAUCEButton.setText("BBQ SAUCE");
        panel12.add(BBQSAUCEButton);
        OLIVEOILButton = new JToggleButton();
        OLIVEOILButton.setBackground(new Color(-15066598));
        OLIVEOILButton.setForeground(new Color(-1));
        OLIVEOILButton.setText("OLIVE OIL");
        panel12.add(OLIVEOILButton);
        final JPanel panel13 = new JPanel();
        panel13.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel13.setBackground(new Color(-1644826));
        pizzaCustomizationMenu.add(panel13, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel14 = new JPanel();
        panel14.setLayout(new CardLayout(0, 0));
        panel14.setBackground(new Color(-1644826));
        panel13.add(panel14, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(80, -1), null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setForeground(new Color(-16777216));
        label5.setHorizontalAlignment(0);
        label5.setText("MEAT");
        panel14.add(label5, "Card1");
        final JPanel panel15 = new JPanel();
        panel15.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel15.setBackground(new Color(-1644826));
        panel13.add(panel15, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        DICEDHAMButton = new JToggleButton();
        DICEDHAMButton.setBackground(new Color(-15066598));
        DICEDHAMButton.setForeground(new Color(-1));
        DICEDHAMButton.setSelected(true);
        DICEDHAMButton.setText("DICED HAM");
        panel15.add(DICEDHAMButton);
        ITALIANSAUSAGEButton = new JToggleButton();
        ITALIANSAUSAGEButton.setBackground(new Color(-15066598));
        ITALIANSAUSAGEButton.setForeground(new Color(-1));
        ITALIANSAUSAGEButton.setText("ITALIAN SAUSAGE");
        panel15.add(ITALIANSAUSAGEButton);
        MEATBALLButton = new JToggleButton();
        MEATBALLButton.setBackground(new Color(-15066598));
        MEATBALLButton.setForeground(new Color(-1));
        MEATBALLButton.setSelected(true);
        MEATBALLButton.setText("MEATBALL");
        panel15.add(MEATBALLButton);
        PEPPERONIButton = new JToggleButton();
        PEPPERONIButton.setBackground(new Color(-15066598));
        PEPPERONIButton.setForeground(new Color(-1));
        PEPPERONIButton.setText("PEPPERONI");
        panel15.add(PEPPERONIButton);
        final JPanel panel16 = new JPanel();
        panel16.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel16.setBackground(new Color(-1644826));
        panel13.add(panel16, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        SALAMIButton = new JToggleButton();
        SALAMIButton.setBackground(new Color(-15066598));
        SALAMIButton.setForeground(new Color(-1));
        SALAMIButton.setText("SALAMI");
        panel16.add(SALAMIButton);
        SMOKEDCHICKENButton = new JToggleButton();
        SMOKEDCHICKENButton.setBackground(new Color(-15066598));
        SMOKEDCHICKENButton.setForeground(new Color(-1));
        SMOKEDCHICKENButton.setSelected(true);
        SMOKEDCHICKENButton.setText("SMOKED CHICKEN");
        panel16.add(SMOKEDCHICKENButton);
        final JPanel panel17 = new JPanel();
        panel17.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel17.setBackground(new Color(-1644826));
        pizzaCustomizationMenu.add(panel17, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel18 = new JPanel();
        panel18.setLayout(new CardLayout(0, 0));
        panel18.setBackground(new Color(-1644826));
        panel17.add(panel18, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(80, -1), null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setForeground(new Color(-16777216));
        label6.setHorizontalAlignment(0);
        label6.setText("VEGGIES");
        panel18.add(label6, "Card1");
        final JPanel panel19 = new JPanel();
        panel19.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel19.setBackground(new Color(-1644826));
        panel17.add(panel19, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        BANANAPEPPERSButton = new JToggleButton();
        BANANAPEPPERSButton.setBackground(new Color(-15066598));
        BANANAPEPPERSButton.setForeground(new Color(-1));
        BANANAPEPPERSButton.setText("BANANA PEPPERS");
        panel19.add(BANANAPEPPERSButton);
        BLACKOLIVESButton = new JToggleButton();
        BLACKOLIVESButton.setBackground(new Color(-15066598));
        BLACKOLIVESButton.setForeground(new Color(-1));
        BLACKOLIVESButton.setText("BLACK OLIVES");
        panel19.add(BLACKOLIVESButton);
        GREENPEPPERSButton = new JToggleButton();
        GREENPEPPERSButton.setBackground(new Color(-15066598));
        GREENPEPPERSButton.setForeground(new Color(-1));
        GREENPEPPERSButton.setText("GREEN PEPPERS");
        panel19.add(GREENPEPPERSButton);
        JALAPENOSButton = new JToggleButton();
        JALAPENOSButton.setBackground(new Color(-15066598));
        JALAPENOSButton.setForeground(new Color(-1));
        JALAPENOSButton.setText("JALAPENOS");
        panel19.add(JALAPENOSButton);
        final JPanel panel20 = new JPanel();
        panel20.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel20.setBackground(new Color(-1644826));
        panel17.add(panel20, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        MUSHROOMSButton = new JToggleButton();
        MUSHROOMSButton.setBackground(new Color(-15066598));
        MUSHROOMSButton.setForeground(new Color(-1));
        MUSHROOMSButton.setText("MUSHROOMS");
        panel20.add(MUSHROOMSButton);
        ONIONSButton = new JToggleButton();
        ONIONSButton.setBackground(new Color(-15066598));
        ONIONSButton.setForeground(new Color(-1));
        ONIONSButton.setText("ONIONS");
        panel20.add(ONIONSButton);
        PINEAPPLEButton = new JToggleButton();
        PINEAPPLEButton.setBackground(new Color(-15066598));
        PINEAPPLEButton.setForeground(new Color(-1));
        PINEAPPLEButton.setText("PINEAPPLE");
        panel20.add(PINEAPPLEButton);
        ROASTEDGARLICButton = new JToggleButton();
        ROASTEDGARLICButton.setBackground(new Color(-15066598));
        ROASTEDGARLICButton.setForeground(new Color(-1));
        ROASTEDGARLICButton.setText("ROASTED GARLIC");
        panel20.add(ROASTEDGARLICButton);
        final JPanel panel21 = new JPanel();
        panel21.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        panel21.setBackground(new Color(-1644826));
        panel17.add(panel21, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        SPINACHButton = new JToggleButton();
        SPINACHButton.setBackground(new Color(-15066598));
        SPINACHButton.setForeground(new Color(-1));
        SPINACHButton.setText("SPINACH");
        panel21.add(SPINACHButton);
        TOMATOESButton = new JToggleButton();
        TOMATOESButton.setBackground(new Color(-15066598));
        TOMATOESButton.setForeground(new Color(-1));
        TOMATOESButton.setText("TOMATOES");
        panel21.add(TOMATOESButton);
        drinkMenu = new JPanel();
        drinkMenu.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        drinkMenu.setBackground(new Color(-1644826));
        MenuOptionCards.add(drinkMenu, "drinks");
        BOTTLEDButton = new JButton();
        BOTTLEDButton.setBackground(new Color(-15066598));
        BOTTLEDButton.setForeground(new Color(-1));
        BOTTLEDButton.setMinimumSize(new Dimension(0, 30));
        BOTTLEDButton.setText("BOTTLED");
        drinkMenu.add(BOTTLEDButton);
        WATERButton = new JButton();
        WATERButton.setBackground(new Color(-15066598));
        WATERButton.setForeground(new Color(-1));
        WATERButton.setMinimumSize(new Dimension(0, 30));
        WATERButton.setText("WATER");
        drinkMenu.add(WATERButton);
        GATORADEButton = new JButton();
        GATORADEButton.setBackground(new Color(-15066598));
        GATORADEButton.setForeground(new Color(-1));
        GATORADEButton.setMinimumSize(new Dimension(0, 30));
        GATORADEButton.setText("GATORADE");
        drinkMenu.add(GATORADEButton);
        FOUNTAINButton = new JButton();
        FOUNTAINButton.setBackground(new Color(-15066598));
        FOUNTAINButton.setForeground(new Color(-1));
        FOUNTAINButton.setMinimumSize(new Dimension(0, 30));
        FOUNTAINButton.setText("FOUNTAIN");
        drinkMenu.add(FOUNTAINButton);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(STANDARDButton);
        buttonGroup.add(CAULIFLOWERButton);
        buttonGroup = new ButtonGroup();
        buttonGroup.add(ALFREDOButton);
        buttonGroup.add(TRADITIONALREDButton);
        buttonGroup.add(ZESTYREDButton);
        buttonGroup.add(NOSAUCEButton);
        buttonGroup = new ButtonGroup();
        buttonGroup.add(HOUSEBLENDButton);
        buttonGroup.add(PARMESANButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MenuOptionCards;
    }

    // @formatter:on
    private enum PizzaType {
        one_topping,
        cheese,
        BYO
    }

    private PizzaType pizzaType;
    private MenuItem currentPizza;

    public void nextCard() {
        ((CardLayout) MenuOptionCards.getLayout()).next(MenuOptionCards);
    }

    private void resetPizzaOptions() {
        for (JToggleButton option : pizzaButtons) {
            option.setSelected(false);
            ButtonModel model = option.getModel();
            ButtonGroup group = ((DefaultButtonModel) model).getGroup();
            if (group != null) {
                group.clearSelection();
            }
            option.repaint();
        }
    }

    private void enablePizzaOptions(List<JToggleButton> options) {
        for (JToggleButton option : options) {
            option.setEnabled(true);
            option.repaint();
        }
    }

    private void enablePizzaOptions() {
        enablePizzaOptions(pizzaButtons);
    }

    private void disablePizzaOptions(List<JToggleButton> options) {
        for (JToggleButton option : options) {
            option.setEnabled(false);
            option.repaint();
        }
    }

    private void disablePizzaOptions() {
        disablePizzaOptions(pizzaButtons);
    }

    private void bindActionListeners() {
        Actions.setOptionsCard.subscribe(
                card -> ((CardLayout) MenuOptionCards.getLayout()).show(MenuOptionCards, card.toString()));
    }

    private void bindPizzaButtons() {
        for (Map.Entry<edu.tamu.spinnstone.models.MenuItem.ItemNames, JButton> entry : pizzaMap.entrySet()) {
            entry.getValue().addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    Database db = Actions.getDatabase.getValue();
                    if (db == null) {
                        System.out.println("database is null");
                        return;
                    }

                    edu.tamu.spinnstone.models.MenuItem menuItem = new edu.tamu.spinnstone.models.MenuItem(db);

                    // fetch the menuitem from the database
                    try {
                        ResultSet rs = db.select("*").from(menuItem.tableName)
                                .where(
                                        edu.tamu.spinnstone.models.MenuItem.ColumnNames.ITEM_NAME.toString(),
                                        entry.getKey().toString())
                                .execute();

                        if (rs.next()) {
                            menuItem.updateFromResultSet(rs);
                        } else {
                            System.out.println("unknown pizza type:");
                            return;
                        }

                    } catch (Exception ex) {
                        System.out.println("Error trying to get pizza menu item: " + ex.getMessage());
                        return;
                    }

                    // create a new pizza order item with the appropriate menu item link
                    OrderItem orderItem = new OrderItem(db);
                    orderItem.menuItemId = menuItem.menuItemId;
                    orderItem.menuItem = menuItem;
                    orderItem.quantity = 1;
                    // no orderid yet (until it is finalized)

                    Order activeOrder = Actions.getOrder.getValue();
                    if (activeOrder == null) {
                        System.out.println("no active order");
                        return;
                    }

                    activeOrder.addOrderItem(orderItem);
                    Actions.activeOrderItem.onNext(orderItem);
                    Actions.orderUpdated.onNext(activeOrder);

                    // set which toppings are available
                    resetPizzaOptions();
                    disablePizzaOptions();

                    edu.tamu.spinnstone.models.MenuItem.ItemNames key = entry.getKey();
                    if (key == edu.tamu.spinnstone.models.MenuItem.ItemNames.ORIGINAL_CHEESE_PIZZA) {
                        pizzaType = PizzaType.cheese;
                        enablePizzaOptions(cheeseButtons);
                        enablePizzaOptions(sauceButtons);
                        enablePizzaOptions(crustButtons);
                        enablePizzaOptions(drizzleButtons);
                    } else if (key == edu.tamu.spinnstone.models.MenuItem.ItemNames.ONE_TOPPING_PIZZA) {
                        pizzaType = PizzaType.one_topping;
                        enablePizzaOptions();
                    } else if (key == edu.tamu.spinnstone.models.MenuItem.ItemNames.TWO_TO_FOUR_TOPPING_PIZZA) {
                        pizzaType = PizzaType.BYO;
                        enablePizzaOptions();
                    }

                    nextCard();
                }
            });
        }
    }

    private void bindToppingButtons() {
        for (Map.Entry<Product.Name, JToggleButton> entry : pizzaToppingMap.entrySet()) {
            entry.getValue().addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent event) {
                    OrderItem orderItem = Actions.activeOrderItem.getValue();
                    Order order = Actions.getOrder.getValue();
                    if (orderItem == null || order == null) {
                        System.out.println("no active order item or order");
                        return;
                    }
                    // edge cases first
                    if (event.getStateChange() == ItemEvent.DESELECTED) {
                        // if the item is being deselected, remove it from the order item
                        orderItem.removeProductByName(entry.getKey());
                        Actions.orderUpdated.onNext(order);
                        return;
                    }

                    List<String> pizzaToppingNames = pizzaToppings.stream()
                            .map(Product.Name::toString)
                            .collect(Collectors.toList());

                    // if the current item is an ingredient
                    if (pizzaToppingNames.contains(entry.getKey().toString())) {
                        // count the number of pizza menuitem products that are ingredients (including
                        // this new one)
                        int toppingCount = orderItem.products.stream().map(product -> product.productName)
                                .filter(pizzaToppingNames::contains)
                                .collect(Collectors.toSet())
                                .size() + 1;

                        // if the amount of toppings is too high, deselect the item
                        switch (pizzaType) {
                            case cheese:
                                if (toppingCount > 0) {
                                    entry.getValue().setSelected(false);
                                    return;
                                }
                                break;
                            case one_topping:
                                if (toppingCount > 1) {
                                    entry.getValue().setSelected(false);
                                    return;
                                }
                                break;
                            case BYO:
                                if (toppingCount > 4) {
                                    entry.getValue().setSelected(false);
                                    return;
                                }
                                break;
                        }
                    }

                    // now do the actual addition
                    Database db = Actions.getDatabase.getValue();
                    if (db == null) {
                        System.out.println("database is null");
                        return;
                    }

                    Product product = new Product(db);
                    try {
                        // fetch the product from the database
                        ResultSet rs = db.select("*").from(product.tableName)
                                .where(
                                        Product.ColumnNames.PRODUCT_NAME.toString(),
                                        entry.getKey().toString())
                                .execute();
                        if (rs.next()) {
                            product.updateFromResultSet(rs);
                            if (product.quantityInStock <= 0) {
                                System.out.println("out of stock");
                                entry.getValue().setSelected(false);
                                entry.getValue().setEnabled(false);
                                return;
                            }
                        } else {
                            System.out.println("unknown topping type:");
                            return;
                        }

                    } catch (Exception ex) {
                        System.out.println("Error trying to get topping product: " + ex.getMessage());
                        return;
                    }

                    // add the product to the order item
                    orderItem.addProduct(product);
                    Actions.orderUpdated.onNext(order);

                }
            });
        }
    }

    private void bindDrinkButtons() {
        for (Map.Entry<edu.tamu.spinnstone.models.MenuItem.ItemNames, JButton> entry : drinkMap.entrySet()) {
            entry.getValue().addMouseListener(new MouseAdapter() {
                @Override
                public void mouseReleased(MouseEvent event) {
                    Database db = Actions.getDatabase.getValue();
                    if (db == null) {
                        System.out.println("database is null");
                        return;
                    }
                    Order activeOrder = Actions.getOrder.getValue();
                    if (activeOrder == null) {
                        System.out.println("no active order");
                        return;
                    }

                    // check if there is already a menuitem matching this one

                    OrderItem matchingItem = activeOrder.orderItems.stream()
                            .filter(item -> item.menuItem.itemName.equals(entry.getKey().toString())).findFirst().orElse(null);

                    if (matchingItem != null) {
                        // increase this order item quantity instead
                        matchingItem.quantity++;
                        Actions.orderUpdated.onNext(activeOrder);
                        return;
                    }

                    edu.tamu.spinnstone.models.MenuItem menuItem = new edu.tamu.spinnstone.models.MenuItem(db);

                    // fetch the menuitem from the database
                    // this and the pizza topping buttons assume that the product name matches the menuitem name
                    // this is not necessarily true, something to consider
                    try {
                        ResultSet rs = db.select("*").from(menuItem.tableName)
                                .where(
                                        edu.tamu.spinnstone.models.MenuItem.ColumnNames.ITEM_NAME.toString(),
                                        entry.getKey().toString())
                                .execute();

                        if (rs.next()) {
                            menuItem.updateFromResultSet(rs);
                        } else {
                            System.out.println("unknown drink type:");
                            return;
                        }

                    } catch (Exception ex) {
                        System.out.println("Error trying to get drink menu item: " + ex.getMessage());
                        return;
                    }


                    // get the associated product
                    Product product = new Product(db);
                    try {
                        ResultSet rs = db.select("*").from(product.tableName)
                                .where(
                                        Product.ColumnNames.PRODUCT_NAME.toString(),
                                        entry.getKey().toString())
                                .execute();
                        if (rs.next()) {
                            product.updateFromResultSet(rs);
                            if (product.quantityInStock <= 0) {
                                System.out.println("out of stock");
                                entry.getValue().setEnabled(false);
                                return;
                            }
                        } else {
                            System.out.println("unknown drink type:");
                            return;
                        }

                    } catch (Exception ex) {
                        System.out.println("Error trying to get drink product: " + ex.getMessage());
                        return;
                    }

                    // create a new drink order item with the appropriate menu item link
                    OrderItem orderItem = new OrderItem(db);
                    orderItem.menuItemId = menuItem.menuItemId;
                    orderItem.menuItem = menuItem;
                    orderItem.quantity = 1;

                    orderItem.addProduct(product);
                    orderItem.isDrink = true;

                    activeOrder.addOrderItem(orderItem);
                    Actions.orderUpdated.onNext(activeOrder);
                }
            });
        }
    }

    public MenuOptions() {

        // region buttonmaps

        sauceButtons = Arrays.asList(
                ALFREDOButton,
                TRADITIONALREDButton,
                ZESTYREDButton,
                NOSAUCEButton,
                HOUSEBLENDButton,
                PARMESANButton);

        drizzleButtons = Arrays.asList(
                BBQSAUCEButton,
                OLIVEOILButton

        );

        crustButtons = Arrays.asList(
                STANDARDButton,
                CAULIFLOWERButton);

        cheeseButtons = Arrays.asList(
                HOUSEBLENDButton,
                PARMESANButton);

        pizzaButtons = Arrays.asList(
                STANDARDButton,
                CAULIFLOWERButton,
                ALFREDOButton,
                TRADITIONALREDButton,
                ZESTYREDButton,
                NOSAUCEButton,
                HOUSEBLENDButton,
                PARMESANButton,
                BBQSAUCEButton,
                OLIVEOILButton,
                DICEDHAMButton,
                ITALIANSAUSAGEButton,
                MEATBALLButton,
                PEPPERONIButton,
                SALAMIButton,
                SMOKEDCHICKENButton,
                BANANAPEPPERSButton,
                BLACKOLIVESButton,
                GREENPEPPERSButton,
                JALAPENOSButton,
                MUSHROOMSButton,
                ONIONSButton,
                PINEAPPLEButton,
                ROASTEDGARLICButton,
                SPINACHButton,
                TOMATOESButton);

        toppingButtons = Arrays.asList(
                DICEDHAMButton,
                ITALIANSAUSAGEButton,
                MEATBALLButton,
                PEPPERONIButton,
                SALAMIButton,
                SMOKEDCHICKENButton,
                BANANAPEPPERSButton,
                BLACKOLIVESButton,
                GREENPEPPERSButton,
                JALAPENOSButton,
                MUSHROOMSButton,
                ONIONSButton,
                PINEAPPLEButton,
                ROASTEDGARLICButton,
                SPINACHButton,
                TOMATOESButton);

        drinkButtons = Arrays.asList(
                BOTTLEDButton,
                WATERButton,
                GATORADEButton,
                FOUNTAINButton);

        drinkMap = new HashMap<edu.tamu.spinnstone.models.MenuItem.ItemNames, JButton>() {
            {
                put(edu.tamu.spinnstone.models.MenuItem.ItemNames.BOTTLED_BEVERAGE, BOTTLEDButton);
                put(edu.tamu.spinnstone.models.MenuItem.ItemNames.GATORADE, GATORADEButton);
                put(edu.tamu.spinnstone.models.MenuItem.ItemNames.FOUNTAIN_DRINK, FOUNTAINButton);
            }
        };

        pizzaSauces = Arrays.asList(
                Product.Name.ALFREDO,
                Product.Name.TRADITIONAL_RED,
                Product.Name.ZESTY_RED);

        pizzaCrusts = Arrays.asList(
                Product.Name.STANDARD,
                Product.Name.CAULIFLOWER);

        pizzaToppings = Arrays.asList(
                Product.Name.DICED_HAM,
                Product.Name.ITALIAN_SAUSAGE,
                Product.Name.MEATBALL,
                Product.Name.PEPPERONI,
                Product.Name.SALAMI,
                Product.Name.SMOKED_CHICKEN,
                Product.Name.BANANA_PEPPERS,
                Product.Name.BLACK_OLIVES,
                Product.Name.GREEN_PEPPERS,
                Product.Name.JALAPENOS,
                Product.Name.MUSHROOMS,
                Product.Name.ONIONS,
                Product.Name.PINEAPPLE,
                Product.Name.ROASTED_GARLIC,
                Product.Name.SPINACH,
                Product.Name.TOMATOES);

        pizzaMap = new HashMap<edu.tamu.spinnstone.models.MenuItem.ItemNames, JButton>() {
            {
                put(edu.tamu.spinnstone.models.MenuItem.ItemNames.ORIGINAL_CHEESE_PIZZA, cheeseButton);
                put(edu.tamu.spinnstone.models.MenuItem.ItemNames.ONE_TOPPING_PIZZA, a1ToppingButton);
                put(edu.tamu.spinnstone.models.MenuItem.ItemNames.TWO_TO_FOUR_TOPPING_PIZZA, buildYourOwnButton);
            }
        };

        pizzaToppingMap = new HashMap<Product.Name, JToggleButton>() {
            {
                put(Product.Name.STANDARD, STANDARDButton);
                put(Product.Name.CAULIFLOWER, CAULIFLOWERButton);
                put(Product.Name.ALFREDO, ALFREDOButton);
                put(Product.Name.TRADITIONAL_RED, TRADITIONALREDButton);
                put(Product.Name.ZESTY_RED, ZESTYREDButton);
                put(Product.Name.HOUSE_BLEND, HOUSEBLENDButton);
                put(Product.Name.PARMESAN, PARMESANButton);
                put(Product.Name.BBQ_SAUCE, BBQSAUCEButton);
                put(Product.Name.OLIVE_OIL, OLIVEOILButton);
                put(Product.Name.DICED_HAM, DICEDHAMButton);
                put(Product.Name.ITALIAN_SAUSAGE, ITALIANSAUSAGEButton);
                put(Product.Name.MEATBALL, MEATBALLButton);
                put(Product.Name.PEPPERONI, PEPPERONIButton);
                put(Product.Name.SALAMI, SALAMIButton);
                put(Product.Name.SMOKED_CHICKEN, SMOKEDCHICKENButton);
                put(Product.Name.BANANA_PEPPERS, BANANAPEPPERSButton);
                put(Product.Name.BLACK_OLIVES, BLACKOLIVESButton);
                put(Product.Name.GREEN_PEPPERS, GREENPEPPERSButton);
                put(Product.Name.JALAPENOS, JALAPENOSButton);
                put(Product.Name.MUSHROOMS, MUSHROOMSButton);
                put(Product.Name.ONIONS, ONIONSButton);
                put(Product.Name.PINEAPPLE, PINEAPPLEButton);
                put(Product.Name.ROASTED_GARLIC, ROASTEDGARLICButton);
                put(Product.Name.SPINACH, SPINACHButton);
                put(Product.Name.TOMATOES, TOMATOESButton);
            }
        };

        // endregion

        // region setup
        bindPizzaButtons();
        bindToppingButtons();
        bindActionListeners();
        bindDrinkButtons();
        // endregion

    }

}
