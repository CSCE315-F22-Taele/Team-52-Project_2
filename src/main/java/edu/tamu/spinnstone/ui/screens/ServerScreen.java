package edu.tamu.spinnstone.ui.screens;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import edu.tamu.spinnstone.models.Order;
import edu.tamu.spinnstone.models.sql.Database;
import edu.tamu.spinnstone.ui.Actions;
import edu.tamu.spinnstone.ui.MenuOptions;
import edu.tamu.spinnstone.ui.NavBar;
import edu.tamu.spinnstone.ui.Receipt;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;


/*
 * @author ServerScreen
 * This class is the UI for the Server
 */
public class ServerScreen {
    public JPanel screen;
    private JButton CHECKOUTButton;
    private JLabel pizzaButton;
    private JLabel drinkButton;
    private NavBar navBar;
    private JLabel otherButton;


    public ServerScreen() {
        /**
         * to generate the menu from the database i need to know where to place the items. I need to
         * know in which top level menu to place the item (pizza, drinks, something else?). Next I need to know whether
         * the product is configurable. If it is configurable, I need to know what the options are. For a pizza in particular,
         * the options need to be separated into crust, sauce, and toppings, drizzle. These options should be checked for
         * inventory and if they are out of stock, they should be grayed out. If the menu item is not configurable, then
         * I need to know which product it is represented by (soda, water, cookie, etc).
         *
         * To accomplish these tasks I need:
         * - the menu item to have a category (pizza, drink, desserts etc)
         * - the menu item to have a configurable flag
         * - the menu item to list all the products it is made up of (options)
         * - the product to have a type (crust, sauce, topping, drizzle, drink)
         *
         * it will get confusing if i try to combine the ideas of product category and
         * which section of the menu an item should be placed. I will
         */


        $$$setupUI$$$();
        pizzaButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                Actions.setOptionsCard.onNext(Actions.OptionCards.PIZZA);
            }
        });
        drinkButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                Actions.setOptionsCard.onNext(Actions.OptionCards.DRINKS);
            }
        });
        otherButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                Actions.setOptionsCard.onNext(Actions.OptionCards.OTHER);
            }
        });
        CHECKOUTButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                Order order = Actions.getOrder.getValue();
                Database database = Actions.getDatabase.getValue();
                if (order == null || database == null) {
                    return;
                }
                try {
                    order.placeOrder();
                    Order newOrder = new Order(database);
                    Actions.getOrder.onNext(newOrder);
                    Actions.setOptionsCard.onNext(Actions.OptionCards.PIZZA);
                } catch (Exception err) {
                    System.out.printf("error placing order: %s%n", err);
                }
            }
        });

    }
    // @formatter:off

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        screen = new JPanel();
        screen.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), 0, 0));
        screen.setBackground(new Color(-1));
        screen.setPreferredSize(new Dimension(1080, 810));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), 0, 0));
        panel1.setBackground(new Color(-1644826));
        screen.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(842, 542), null, 0, true));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(8, 8, 8, 8), 0, 0));
        panel2.setBackground(new Color(-1526967));
        panel1.add(panel2, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, true));
        CHECKOUTButton = new JButton();
        CHECKOUTButton.setBackground(new Color(-15066598));
        CHECKOUTButton.setForeground(new Color(-1));
        CHECKOUTButton.setText("CHECKOUT");
        panel2.add(CHECKOUTButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(6, 1, new Insets(16, 8, 16, 8), 0, 0));
        panel3.setBackground(new Color(-2954282));
        panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(125, 251), null, 0, true));
        pizzaButton = new JLabel();
        pizzaButton.setIcon(new ImageIcon(getClass().getResource("/pizza_100x100_circle.png")));
        pizzaButton.setText("");
        pizzaButton.putClientProperty("html.disable", Boolean.FALSE);
        panel3.add(pizzaButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel3.add(spacer2, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        drinkButton = new JLabel();
        drinkButton.setIcon(new ImageIcon(getClass().getResource("/soda_100x100_circle.png")));
        drinkButton.setText("");
        panel3.add(drinkButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel3.add(spacer3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(-1, 8), null, 0, false));
        otherButton = new JLabel();
        otherButton.setIcon(new ImageIcon(getClass().getResource("/food_100x100.png")));
        otherButton.setText("");
        panel3.add(otherButton, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel3.add(spacer4, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(-1, 8), null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), 0, 0));
        panel4.setBackground(new Color(-1644826));
        panel1.add(panel4, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(24, 251), null, 0, true));
        final MenuOptions nestedForm1 = new MenuOptions();
        panel4.add(nestedForm1.$$$getRootComponent$$$(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(711, 600), null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(8, 8, 8, 8), 0, 0));
        panel5.setBackground(new Color(-8355712));
        panel5.setForeground(new Color(-8355712));
        panel1.add(panel5, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel5.add(navBar.$$$getRootComponent$$$(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), 0, 0));
        panel6.setBackground(new Color(-1));
        screen.add(panel6, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Receipt nestedForm2 = new Receipt();
        panel6.add(nestedForm2.$$$getRootComponent$$$(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(240, -1), new Dimension(240, 720), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return screen;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        navBar = new NavBar();
        ArrayList<NavBar> navBars = new ArrayList<>();
        navBars.add(navBar);
        Actions.navBars.onNext(navBars);

        navBar.SHIPMENTSButton.setVisible(false);
        navBar.INVENTORYButton.setVisible(false);
        navBar.ANALYTICSButton.setVisible(false);
        navBar.SERVERVIEWButton.setSelected(true);
    }

    // @formatter:on

}
